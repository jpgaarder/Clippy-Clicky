{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","id","src","image","onClick","checkIfClicked","Wrapper","children","Header","currentScore","topScore","Footer","class","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cards","bind","assertThisInitialized","clickedCard","filter","card","cardsCopy","slice","sort","b","Math","random","clicked","resetCardsCopy","map","setState","findIndex","_this2","components_Header_Header","components_Wrapper_Wrapper","components_Card_Card","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e19c66aa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n// set properties for the image and the onClick event to see if the card has been clicked or not already\r\nconst Card = props => (\r\n  <div className=\"card\">\r\n    <div className=\"img-container\">\r\n      <img \r\n        alt={\"This is image \" + props.id} \r\n        src={props.image}\r\n        onClick={() => props.checkIfClicked(props.id)}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\n// set properties for the wrapper around the images and return everything (props.children)\r\nconst Wrapper = props => (\r\n  <div className=\"container wrapper\">{props.children}</div>\r\n);\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\n// create a header with a Bootstrap navbar and jumbotron\r\nconst Header = props => (\r\n  \r\n  <div className=\"main-container\">\r\n    <nav className=\"navbar sticky-top navbar-light bg-light justify-content-end\">\r\n      <h5 className=\"text-muted\">Current game score: {props.currentScore} | Top score: {props.topScore}</h5>\r\n    </nav>\r\n    \r\n    <div className=\"jumbotron text-muted\">\r\n      <h1>Clippy Clicky Game!</h1>\r\n      <p className=\"lead\">Click Clippy, but only click each Clippy once!</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\n// set the footer to a copyright string\r\nconst Footer = props => (\r\n  <div className=\"footer\">\r\n    <p class=\"text-muted text-center\">Clippy fan art does not reflect the views or opinions of the developer, as true as they may seem.</p>\r\n  </div>\r\n);\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\n// import the cards from a json list with image links\nimport cards from \"./cards.json\";\n\n// create constructor from the cards and set the initial scores to 0\n// topScore is the most cards clicked without duplicating\n// currentScore is the most clicked this round, and resets to 0 when duplicating clicks\nclass App extends Component {  \n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: cards,\n      topScore: 0,\n      currentScore: 0,\n    };\n    this.checkIfClicked = this.checkIfClicked.bind(this);\n  }\n  \n  // check if a card has been clicked\n  checkIfClicked(id) {\n    // create a copy of the cards and use a random method to sort the array\n    let clickedCard = this.state.cards.filter(card => card.id === id)[0];\n    let cardsCopy = this.state.cards.slice().sort(function(a, b){return 0.5 - Math.random()});\n    // if a card has not been clicked, set its clicked state to true\n    if (!clickedCard.clicked) {\n      clickedCard.clicked = true;\n      cardsCopy[cardsCopy.findIndex((card) => card.id === id)] = clickedCard;\n      \n      // set the state and increment the counter\n      this.setState({\n        cards: cardsCopy,\n        currentScore: this.state.currentScore + 1,\n        topScore: (this.state.currentScore + 1 > this.state.topScore ? this.state.currentScore + 1 : this.state.topScore),\n      });\n    }\n    \n    // if a card has been clicked already, then set its click to false and reset the game\n    else {\n      \n      let resetCardsCopy = cardsCopy.map((card) => {\n        return {\n          id: card.id,\n          image: card.image,\n          clicked: false,\n        }\n      });\n      this.setState({\n        cards: resetCardsCopy,\n        currentScore: 0,\n      });\n    } \n  }\n  \n  // render the header, score, wrapper, and footer on the page using the current state values\n  render() {\n    return (\n      <div className=\"container\">\n        <Header currentScore={this.state.currentScore} topScore={this.state.topScore}/>\n        <Wrapper>  \n          {this.state.cards.map(card => (\n            <Card\n              checkIfClicked={this.checkIfClicked}\n              id={card.id}\n              key={card.id}\n              image={card.image}\n              />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}